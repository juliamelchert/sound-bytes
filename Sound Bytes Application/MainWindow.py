# Author: Julia Melchert
# Date: 2/14/22
# Description: Main UI functionality for SOUND BYTES application 

import sys, os, time

from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QMainWindow

from Ui_MainWindow import Ui_Dialog

class MainWindow():
    """ Main window class """
    def __init__(self):
        """ Constructor for MainWindow class """
        self.main_win = QMainWindow()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.main_win)

        # Initializes home page as the first page shown
        self.ui.stackedWidget.setCurrentWidget(self.ui.homePage)

        # Button signals/slots
        self.ui.submitButton.clicked.connect(self.showResults)
        self.ui.helpButton.clicked.connect(self.showHelp)
        self.ui.backButtonR.clicked.connect(self.showHome)
        self.ui.backButtonH.clicked.connect(self.showHome)

    def show(self):
        """ Displays the main window """
        self.main_win.show()

    def showResults(self):
        """ Shows the results page """
        # Sets the text for the input artist and song
        self.ui.artistBioLabel.setText(f"{self.ui.artistInput.toPlainText()}'s Biography")
        self.ui.songLyricsLabel.setText(f'"{self.ui.songInput.toPlainText()}" Lyrics')
        
        # Makes a request to 'signal.txt' to generate the artist's biography with the Wikipedia Scraper Microservice
        with open('../signal.txt', 'w') as biography_request:
            print(f"Sending biography request: summary|{self.ui.artistInput.toPlainText()}")
            biography_request.write(f"summary|{self.ui.artistInput.toPlainText()}")

        # Makes a request to 'lyrics-service-input.txt' to generate the song's lyrics with the Song Lyrics Microservice
        with open('../lyrics-service-input.txt', 'w') as lyrics_request:
            print(f"Sending lyrics request: {self.ui.artistInput.toPlainText()} {self.ui.songInput.toPlainText()}")
            lyrics_request.write(f"{self.ui.artistInput.toPlainText()} {self.ui.songInput.toPlainText()}")
        
        # Waits until the output.txt file is edited by the Wikipedia Scraper Microservice
        while os.path.getsize('../output.txt') == 0:
            time.sleep(0.5)

        # Receives the artist's biography from the output generated by the Wikipedia Scraper Microservice
        with open('../output.txt', 'r') as infile:
            givenArtistBio = infile.read()
            self.ui.artistBio.setText(givenArtistBio)

        # Clears the output file after reading its contents so that the program will wait for the generation of the next biography
        with open('../output.txt', 'w') as outfile:
            outfile.write("")

        # Waits until the lyrics-service-output.txt file is created by the Song Lyrics Microservice
        while os.path.exists('../lyrics-service-output.txt') is False:
            time.sleep(0.5)

        # Receives the song's lyrics from the output generated by the Song Lyrics Microservice
        with open('../lyrics-service-output.txt', 'r') as infile:
            givenSongLyrics = infile.read()
            self.ui.songLyrics.setText(givenSongLyrics)

        # Removes the 'lyrics-service-output.txt' file so that the program will wait for generation of the next lyrics
        os.remove('../lyrics-service-output.txt')

        # Shows the results page
        self.ui.stackedWidget.setCurrentWidget(self.ui.resultsPage)

    def showHome(self):
        """ Shows the results page """
        # Clears the input text
        self.ui.artistInput.setText("")
        self.ui.songInput.setText("")

        # Shows the home page
        self.ui.stackedWidget.setCurrentWidget(self.ui.homePage)

    def showHelp(self):
        """ Shows the results page """
        self.ui.stackedWidget.setCurrentWidget(self.ui.helpPage)

    
if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_win = MainWindow()
    main_win.show()
    sys.exit(app.exec_())

